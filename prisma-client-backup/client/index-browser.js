
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firebaseUid: 'firebaseUid',
  email: 'email',
  emailVerified: 'emailVerified',
  displayName: 'displayName',
  employeeId: 'employeeId',
  firstName: 'firstName',
  lastName: 'lastName',
  registrationDate: 'registrationDate',
  lastLoginDate: 'lastLoginDate',
  isActive: 'isActive',
  accountType: 'accountType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PilotScalarFieldEnum = {
  id: 'id',
  empNumber: 'empNumber',
  name: 'name',
  pilotHireDate: 'pilotHireDate',
  scheduledRetireDate: 'scheduledRetireDate',
  isRetired: 'isRetired',
  lastSeenDate: 'lastSeenDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SenioritySnapshotScalarFieldEnum = {
  id: 'id',
  seniorityNumber: 'seniorityNumber',
  category: 'category',
  reportDate: 'reportDate',
  baseCode: 'baseCode',
  fleetCode: 'fleetCode',
  positionCode: 'positionCode',
  baseCity: 'baseCity',
  fleetName: 'fleetName',
  positionName: 'positionName',
  isPlaceholder: 'isPlaceholder',
  pilotId: 'pilotId',
  createdAt: 'createdAt'
};

exports.Prisma.DataImportScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  fileType: 'fileType',
  reportDate: 'reportDate',
  recordCount: 'recordCount',
  importedAt: 'importedAt'
};

exports.Prisma.PayScaleScalarFieldEnum = {
  id: 'id',
  effectiveDate: 'effectiveDate',
  expirationDate: 'expirationDate',
  contractVersion: 'contractVersion',
  isActive: 'isActive',
  createdAt: 'createdAt',
  contractId: 'contractId'
};

exports.Prisma.AircraftScalarFieldEnum = {
  id: 'id',
  aircraftCode: 'aircraftCode',
  aircraftName: 'aircraftName',
  aircraftType: 'aircraftType',
  payCategory: 'payCategory',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.PayRateScalarFieldEnum = {
  id: 'id',
  aircraftId: 'aircraftId',
  payScaleId: 'payScaleId',
  position: 'position',
  yearOfService: 'yearOfService',
  hourlyRate: 'hourlyRate',
  createdAt: 'createdAt'
};

exports.Prisma.ContractScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  version: 'version',
  versionNumber: 'versionNumber',
  contractType: 'contractType',
  effectiveDate: 'effectiveDate',
  expirationDate: 'expirationDate',
  ratificationDate: 'ratificationDate',
  previousVersionId: 'previousVersionId',
  title: 'title',
  description: 'description',
  pdfFilePath: 'pdfFilePath',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContractItemScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  itemId: 'itemId',
  sectionNumber: 'sectionNumber',
  title: 'title',
  category: 'category',
  subcategory: 'subcategory',
  content: 'content',
  structuredData: 'structuredData',
  summary: 'summary',
  isNew: 'isNew',
  isModified: 'isModified',
  isDeleted: 'isDeleted',
  pageNumber: 'pageNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContractChangeScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  changeType: 'changeType',
  itemId: 'itemId',
  category: 'category',
  subcategory: 'subcategory',
  changeDescription: 'changeDescription',
  oldValue: 'oldValue',
  newValue: 'newValue',
  impact: 'impact',
  impactAmount: 'impactAmount',
  impactUnit: 'impactUnit',
  analysisNotes: 'analysisNotes',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Pilot: 'Pilot',
  SenioritySnapshot: 'SenioritySnapshot',
  DataImport: 'DataImport',
  PayScale: 'PayScale',
  Aircraft: 'Aircraft',
  PayRate: 'PayRate',
  Contract: 'Contract',
  ContractItem: 'ContractItem',
  ContractChange: 'ContractChange'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
